spec:
  inputs:
    db_user:
      description: "PostgreSQL username to create and grant privileges to"
      type: string
    db_name:
      description: "PostgreSQL database to create"
      type: string

---

stages:
  - postgres

psql_load_credentials:
  stage: postgres
  before_script:
    - apt update
    - apt install -y software-properties-common
    - add-apt-repository universe
    - apt install -y jq
  variables:
    DB_USER: $[[ inputs.db_user ]]
  script:
    - |
      PSQL_SECRETS=${PSQL_SECRETS:-"{}"}
      DB_PASS="$(echo "$PSQL_SECRETS" | jq -r ".$DB_USER // \"\"")"

      echo DB_USER="$DB_USER" > credentials.env
      echo DB_PASS="$DB_PASS" >> credentials.env
  artifacts:
    reports:
      dotenv: credentials.env
  rules:
    - if: '"$[[ inputs.db_user ]]" != ""'
    - when: never

psql_create_user:
  stage: postgres
  image: docker:28.4.0-cli
  variables:
    DOCKER_HOST: tcp://docker-shared:2375
  before_script:
    - apk add --no-cache openssl curl jq
  script:
    - |
      if [ -z "$DB_PASS" ]; then
            DB_PASS=$(openssl rand -base64 12)
            echo "Creating user: $DB_USER"

            docker exec datalab-postgres-1 psql -c "
                DO
                \$\$
                BEGIN
                IF NOT EXISTS (SELECT FROM pg_roles WHERE rolname = '$DB_USER') THEN
                    CREATE USER $DB_USER WITH PASSWORD '$DB_PASS';
                END IF;
                END
                \$\$
            "

            echo "Updating CI/CD variable: PSQL_SECRETS"

            PSQL_SECRETS=${PSQL_SECRETS:-"{}"}
            PSQL_SECRETS=$(echo "$PSQL_SECRETS" | jq -c ". + { \"$DB_USER\": \"$DB_PASS\" }")

            curl \
                -X POST \
                -H "PRIVATE-TOKEN: $GITLAB_TOKEN" \
                -d "key=PSQL_SECRETS" \
                -d "value=$PSQL_SECRETS" \
                -d "protected=false" \
                -d "raw=true" \
                -d "hidden=true" \
                -d "masked=true" \
                "$CI_API_V4_URL/projects/$CI_PROJECT_ID/variables"
        else
            echo "User found: $DB_USER"
        fi

        echo DB_USER="$DB_USER" > credentials.env
        echo DB_PASS="$DB_PASS" >> credentials.env
  artifacts:
    reports:
      dotenv: credentials.env
  needs:
    - psql_load_credentials
  rules:
    - if: '"$[[ inputs.db_user ]]" != ""'
    - when: never

psql_create_db:
  stage: postgres
  image: docker:28.4.0-cli
  variables:
    DOCKER_HOST: tcp://docker-shared:2375
    DB_NAME: $[[ inputs.db_name ]]
  script:
    - |
      echo "Creating database: $DB_NAME"

      docker exec datalab-postgres-1 \
          psql -c "CREATE DATABASE $DB_NAME" \
          || echo "Database exists: $DB_NAME"

      echo "Granting all privileges to user: $DB_USER"

      docker exec datalab-postgres-1 \
          psql -c "GRANT ALL PRIVILEGES ON DATABASE $DB_NAME TO $DB_USER"

      echo DB_NAME="$DB_NAME" > credentials.env
      echo DB_USER="$DB_USER" >> credentials.env
      echo DB_PASS="$DB_PASS" >> credentials.env
  artifacts:
    paths:
      - credentials.env
    expire_in: 15 minutes
  needs:
    - psql_create_user
  rules:
    - if: '"$[[ inputs.db_name ]]" != ""'
    - when: never
